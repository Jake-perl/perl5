#!/usr/bin/perl

# output a list of:
#  a) files listed in MANIFEST which don't exist
#  b) files which exist but which aren't in MANIFEST

# this file should be refactored with t/porting/manifest.t and
# Porting/manifest_list.pm

use v5.14;
use warnings;
use File::Find;
use Getopt::Long;
use ExtUtils::Manifest qw{ maniread maniskip };
use constant MAX_EXIT_CODE => 124;

my $exitstatus;
GetOptions('exitstatus!', \$exitstatus)
    or die "$0 [--exitstatus]";

my $bonus = 0;
my $skip = maniskip;

sub read_manifest {
    my @from_manifest = sort keys %{ maniread("MANIFEST") };

    my %files;
    my $missing = 0;
    foreach my $file (@from_manifest) {
        $files{$file} = 1;
        next if -f $file;
        $missing++;
        print "'$file' from 'MANIFEST' doesn't exist\n";
    }

    return (\%files, $missing);
}

my ($manifest_files, $manifest_missing) = read_manifest("MANIFEST");

my @ls_files = `git ls-files --full-name`;
my %git_files = map { $_ => 1 } @ls_files;

find {
    no_chdir => 1,
    wanted => sub {
        return if -d;
        my $path = $File::Find::name =~ s!^\./!!r;
        return if $skip->($path);
        return if $manifest_files->{$path};
        return unless $git_files{$path};

        ++$bonus;
        print "'$path'\t\tnot in MANIFEST or not skipped by MANIFEST.SKIP\n";

    },
}, ".";

my $problems = $manifest_missing + $bonus;

# We can't (meaningfully) exit with codes above 255, so we're going to have to
# clamp them to some range whatever we do. So as we need the code anyway, use
# 124 as our maximum instead, and then we can run as a useful git bisect run
# script if needed...
my $exitcode = (!$exitstatus)
               ? 0
               : ($problems > MAX_EXIT_CODE)
                 ? MAX_EXIT_CODE
                 : $problems;

exit $exitcode;
